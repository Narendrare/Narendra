pipeline {
    agent { dockerfile true }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    triggers {
      bitBucketTrigger(
        [
            [
                $class: 'BitBucketPPRPullRequestServerTriggerFilter',
                actionFilter: [
                    $class: 'BitBucketPPRPullRequestServerCreatedActionFilter',
                    allowedBranches: '',
                    isToApprove: true
                ]
            ],
            [
                $class: 'BitBucketPPRPullRequestServerTriggerFilter',
                actionFilter: [
                    $class: 'BitBucketPPRPullRequestServerUpdatedActionFilter',
                    allowedBranches: '',
                    isToApprove: true
                ]
            ]
        ])
    }

    stages {
        stage('Compile') {
            steps {
                script {
                    configFileProvider([configFile(fileId: 'ss-m2-settings', variable: 'M2_SETTINGS')]) {
                        sh 'mvn -s $M2_SETTINGS -B -e compile'
                    }
                }
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    try {
                        configFileProvider([configFile(fileId: 'ss-m2-settings', variable: 'M2_SETTINGS')]) {
                            sh 'mvn -s $M2_SETTINGS -B -e test -Dmaven.main.skip'
                        }
                    } catch (Exception err) {
                        echo err.getMessage()
                    }
                }
                xunit([JUnit(excludesPattern: '', pattern: 'target/surefire-reports/*.xml', stopProcessingIfError: true)])
            }
        }

        stage('Code Quality') {
            steps {
                sh "echo 'TBD perform SonarQube scan when service is ready'"
            }
        }

        stage('Package') {
            steps {
                script {
                    configFileProvider([configFile(fileId: 'ss-m2-settings', variable: 'M2_SETTINGS')]) {
                        sh 'mvn -s $M2_SETTINGS -B -e package -Dmaven.main.skip -Dmaven.test.skip=true'
                    }
                }
                archiveArtifacts artifacts: "target/*.war"
            }
        }

        stage('Release') {
            when { branch "master" }
            steps {
                sh "echo 'release/upload the binary to artifactory'"
            }
        }

        stage('Deploy') {
            when { branch "master" }
            steps {
                sh "echo 'team to define the deploy scrip that will be'"
            }
        }
    }
}
